[{"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/utils/constants.js":"1","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/errors/ServerErrorView.js":"2","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/layouts/DashboardLayout/index.js":"3","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/auth/callbackStyle.js":"4","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/customer/CustomerListView/Results.js":"5","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/components/ProgressBar.js":"6","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/customer/CustomerImport/Footer.js":"7","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/index.js":"8","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/context/customers/context.js":"9","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/customer/index.js":"10","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/components/AppSelect.js":"11","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/components/AppAlert.js":"12","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/customer/CustomerListView/Toolbar.js":"13","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/auth/Callback.js":"14","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/customer/CustomerImport/CustomerImport.js":"15","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/customer/CustomerListView/CustomerListView.js":"16"},{"size":255,"mtime":1610689256048,"results":"17","hashOfConfig":"18"},{"size":1724,"mtime":1608901338831,"results":"19","hashOfConfig":"18"},{"size":1343,"mtime":1608891445833,"results":"20","hashOfConfig":"18"},{"size":364,"mtime":1608962986781,"results":"21","hashOfConfig":"18"},{"size":7002,"mtime":1610075225203,"results":"22","hashOfConfig":"18"},{"size":786,"mtime":1609392934825,"results":"23","hashOfConfig":"18"},{"size":1034,"mtime":1610181021786,"results":"24","hashOfConfig":"18"},{"size":572,"mtime":1609675502894,"results":"25","hashOfConfig":"18"},{"size":3027,"mtime":1610857695344,"results":"26","hashOfConfig":"18"},{"size":160,"mtime":1610075103609,"results":"27","hashOfConfig":"18"},{"size":467,"mtime":1610189683372,"results":"28","hashOfConfig":"18"},{"size":164,"mtime":1609673424991,"results":"29","hashOfConfig":"18"},{"size":3330,"mtime":1610857432555,"results":"30","hashOfConfig":"18"},{"size":1913,"mtime":1610857778794,"results":"31","hashOfConfig":"18"},{"size":4943,"mtime":1610857785246,"results":"32","hashOfConfig":"18"},{"size":1183,"mtime":1610857799066,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1piaqt7",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/utils/constants.js",[],["68","69"],"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/errors/ServerErrorView.js",[],"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/layouts/DashboardLayout/index.js",[],"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/auth/callbackStyle.js",[],"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/customer/CustomerListView/Results.js",["70","71"],"import { useState, useContext } from \"react\";\nimport clsx from \"clsx\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport {\n  Avatar,\n  Box,\n  Card,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\n\nimport { CustomerContext } from \"../../../context/customers/context\";\nimport ProgressBar from \"../../../components/ProgressBar\";\nimport getInitials from \"../../../utils/getInitials\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  avatar: {\n    marginRight: theme.spacing(2),\n  },\n  error: {\n    color: \"red\",\n    fontSize: \"11px\",\n    maxWidth: \"200px\",\n  },\n  // selectedTableRow: {\n  //   \"&$selected, &$selected:hover\": {\n  //     backgroundColor: fade(\n  //       theme.palette.primary.main,\n  //       theme.palette.action.selectedOpacity\n  //     ),\n  //   },\n  // },\n}));\n\nconst Results = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const context = useContext(CustomerContext);\n\n  const handleSelectAll = (event) => {\n    let newSelectedCustomerIds;\n\n    if (event.target.checked) {\n      newSelectedCustomerIds = context.customers.map(\n        (customer) => `${customer.DisplayName}::${customer.Id}`\n      );\n    } else {\n      newSelectedCustomerIds = [];\n    }\n\n    context.toggleSelectAllCustomer(newSelectedCustomerIds);\n  };\n\n  const handleSelectOne = (event, Id) => {\n    const selectedIndex = context.selectedCustomerIds.indexOf(Id);\n    let newSelectedCustomerIds = [];\n\n    if (selectedIndex === -1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(\n        context.selectedCustomerIds,\n        Id\n      );\n    } else if (selectedIndex === 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(\n        context.selectedCustomerIds.slice(1)\n      );\n    } else if (selectedIndex === context.selectedCustomerIds.length - 1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(\n        context.selectedCustomerIds.slice(0, -1)\n      );\n    } else if (selectedIndex > 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(\n        context.selectedCustomerIds.slice(0, selectedIndex),\n        context.selectedCustomerIds.slice(selectedIndex + 1)\n      );\n    }\n\n    context.toggleSelectAllCustomer(newSelectedCustomerIds);\n  };\n\n  return (\n    <Card className={clsx(classes.root, className)} {...rest}>\n      <PerfectScrollbar>\n        <Box minWidth={1050}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={\n                      context.selectedCustomerIds?.length ===\n                      context.customers.length\n                    }\n                    color=\"primary\"\n                    indeterminate={\n                      context.selectedCustomerIds.length > 0 &&\n                      context.selectedCustomerIds.length <\n                        context.customers.length\n                    }\n                    onChange={handleSelectAll}\n                  />\n                </TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Email</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Phone</TableCell>\n                <TableCell>Opening Balance</TableCell>\n                <TableCell>Registration date</TableCell>\n                <TableCell>Logs</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {context.loading ? (\n                <TableRow>\n                  <TableCell colSpan={8} align=\"center\">\n                    <ProgressBar progress={context.progress} />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                context.customers.map((customer) => (\n                  <TableRow\n                    hover\n                    key={customer.Id}\n                    // selected={\n                    //   context.selectedCustomerIds.indexOf(\n                    //     `${customer.DisplayName}::${customer.Id}`\n                    //   ) !== -1\n                    // }\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        checked={\n                          context.selectedCustomerIds.indexOf(\n                            `${customer.DisplayName}::${customer.Id}`\n                          ) !== -1\n                        }\n                        onChange={(event) =>\n                          handleSelectOne(\n                            event,\n                            `${customer.DisplayName}::${customer.Id}`\n                          )\n                        }\n                        value=\"true\"\n                        color=\"primary\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Box alignItems=\"center\" display=\"flex\">\n                        <Avatar className={classes.avatar}>\n                          {getInitials(customer.FullyQualifiedName)}\n                        </Avatar>\n                        <Typography color=\"textPrimary\" variant=\"body1\">\n                          {customer.FullyQualifiedName}\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell>{customer.PrimaryEmailAddr?.Address}</TableCell>\n                    <TableCell>\n                      {`${customer.BillAddr?.City}, ${customer.BillAddr?.CountrySubDivisionCode}, ${customer.BillAddr?.Line1}`}\n                    </TableCell>\n                    <TableCell>\n                      {customer.PrimaryPhone?.FreeFormNumber}\n                    </TableCell>\n                    <TableCell>\n                      {customer.CurrencyRef?.value}\n                      {customer.Balance}.00\n                    </TableCell>\n                    <TableCell>\n                      {moment(customer.MetaData?.CreateTime).format(\n                        \"DD/MM/YYYY\"\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <p className={classes.error}>{customer.logs}</p>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={context.totalResult}\n        onChangePage={(_e, newPage) => context.updatePage(newPage)}\n        onChangeRowsPerPage={(e) => context.updatePerPage(e.target.value)}\n        page={context.page}\n        rowsPerPage={context.perPage}\n        rowsPerPageOptions={[50, 100, 250, 500, 1000]}\n      />\n    </Card>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default Results;\n","/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/components/ProgressBar.js",[],"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/customer/CustomerImport/Footer.js",["72"],"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/index.js",[],"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/context/customers/context.js",[],"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/customer/index.js",[],"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/components/AppSelect.js",[],"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/components/AppAlert.js",[],"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/customer/CustomerListView/Toolbar.js",[],"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/auth/Callback.js",["73"],"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/customer/CustomerImport/CustomerImport.js",["74","75","76"],"/home/przbadu/projects/code/ror/qbo-app/qbo-sync/src/views/customer/CustomerListView/CustomerListView.js",["77"],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":10,"nodeType":"84","messageId":"85","endLine":1,"endColumn":18},{"ruleId":"82","severity":1,"message":"86","line":20,"column":10,"nodeType":"84","messageId":"85","endLine":20,"endColumn":14},{"ruleId":"82","severity":1,"message":"87","line":3,"column":8,"nodeType":"84","messageId":"85","endLine":3,"endColumn":18},{"ruleId":"88","severity":1,"message":"89","line":43,"column":6,"nodeType":"90","endLine":43,"endColumn":8,"suggestions":"91"},{"ruleId":"82","severity":1,"message":"92","line":49,"column":10,"nodeType":"84","messageId":"85","endLine":49,"endColumn":17},{"ruleId":"82","severity":1,"message":"93","line":49,"column":19,"nodeType":"84","messageId":"85","endLine":49,"endColumn":29},{"ruleId":"94","severity":1,"message":"95","line":88,"column":42,"nodeType":"96","messageId":"97","endLine":88,"endColumn":44},{"ruleId":"88","severity":1,"message":"98","line":25,"column":6,"nodeType":"90","endLine":25,"endColumn":8,"suggestions":"99"},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'fade' is defined but never used.","'Typography' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'context', 'navigate', and 'queryParams'. Either include them or remove the dependency array.","ArrayExpression",["102"],"'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'context'. Either include it or remove the dependency array.",["103"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"Update the dependencies array to be: [context, navigate, queryParams]",{"range":"108","text":"109"},"Update the dependencies array to be: [context]",{"range":"110","text":"111"},[1260,1262],"[context, navigate, queryParams]",[737,739],"[context]"]